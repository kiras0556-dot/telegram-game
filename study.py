# luschin_casino_aiogram3_fixed_final.py
# Python 3.8+
# pip install aiogram
# –ó–∞–ø—É—Å–∫: python luschin_casino_aiogram3_fixed_final.py

import asyncio
import json
import os
import random
import logging
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----------
# –£–í–ê–ì–ê: –ó–∞–º—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, —è –∑–∞–ª–∏—à–∏–≤ –∑–∞–≥–ª—É—à–∫—É.
# –î–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–æ–∫–µ–Ω.
# –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.environ.get("BOT_TOKEN") 

if not TOKEN:
    logging.error("‚ùå –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è.")
    # –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è, —è–∫—â–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ–º–∞—î
    exit(1) 

# –£–í–ê–ì–ê: DATA_FILE —Ç–∞ CARDS_DIR —Ç–∞–∫–æ–∂ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ
DATA_FILE = "users.json"
CARDS_DIR = "cards"
# -----------------------------------

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
USERS: Dict[str, Dict[str, Any]] = {}
USER_LEVELS: Dict[str, int] = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä—ñ–≤–Ω—ñ –≤ –æ–∫—Ä–µ–º–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏

# ---- –ü—É–ª –∫–∞—Ä—Ç–æ–∫ ----
CARD_POOL = [
    {"id": "pasporty", "name": "–ø–∞—Å–ø–æ—Ä—Ç—É", "rarity": "common", "file": "pasporty.jpg"},
    {"id": "zagakovi", "name": "–∑–∞–≥–∞–¥–∫–æ–≤–∏–π", "rarity": "medium", "file": "zagakovi.jpg"},
    {"id": "viking", "name": "–≤—ñ–∫—ñ–Ω–≥", "rarity": "rare", "file": "viking.jpg"},
    {"id": "gadbad", "name": "–£—Ç—é—Ç—é", "rarity": "common", "file": "gadbad.jpg"},
    {"id": "holy-moly", "name": "–°—ñ–≥–º–∞", "rarity": "medium", "file": "holy-moly.jpg"},
    {"id": "oooyy", "name": "–í–æ–ª—Ç–µ—Ä", "rarity": "rare", "file": "oooyy.jpg"},
    {"id": "ohyrechnik", "name": "ohyrechnik", "rarity": "rare", "file": "ohyrechnik.jpg"},
    {"id": "morjak", "name": "morjak", "rarity": "common", "file": "morjak.jpg"},
    {"id": "lusach", "name": "lusach", "rarity": "rare", "file": "lusach.jpg"},
    {"id": "letsacooke", "name": "letsacooke", "rarity": "medium", "file": "letsacooke.jpg"},
    {"id": "kolaba", "name": "kolaba", "rarity": "common", "file": "kolaba.jpg"},
    {"id": "pikmiband", "name": "pikmiband", "rarity": "rare", "file": "pikmiband.jpg"},
    {"id": "prime", "name": "prime", "rarity": "medium", "file": "prime.jpg"},
    {"id": "sigmafirst", "name": "sigmafirst", "rarity": "common", "file": "sigmafirst.jpg"},
    {"id": "sigmakucherhappy", "name": "sigmakucherhappy", "rarity": "rare", "file": "sigmakucherhappy.jpg"},
    {"id": "sigmalatinys", "name": "sigmalatinys", "rarity": "medium", "file": "sigmalatinys.jpg"},
    {"id": "signakucher", "name": "signakucher", "rarity": "common", "file": "signakucher.jpg"},
    {"id": "SIMAN", "name": "SIMAN", "rarity": "rare", "file": "SIMAN.jpg"},
    {"id": "stylegentelmen", "name": "stylegentelmen", "rarity": "medium", "file": "stylegentelmen.jpg"},
    {"id": "gucul", "name": "gucul", "rarity": "common", "file": "gucul.jpg"},
    {"id": "grizmanylizky", "name": "grizmanylizky", "rarity": "rare", "file": "grizmanylizky.jpg"},
    {"id": "gitarista", "name": "gitarista.", "rarity": "medium", "file": "gitarista.jpg"},
    {"id": "ghost", "name": "ghost.", "rarity": "common", "file": "ghost.jpg"},
    {"id": "floversglovo", "name": "floversglovo.", "rarity": "rare", "file": "floversglovo.jpg"},
    {"id": "color", "name": "color.", "rarity": "medium", "file": "color.jpg"},
    {"id": "brat2", "name": "brat2.", "rarity": "common", "file": "brat2.jpg"},
    {"id": "brat.", "name": "brat..", "rarity": "rare", "file": "brat.jpg"},
    {"id": "bouling", "name": "bouling.", "rarity": "medium", "file": "bouling.jpg"},
    {"id": "beatiful", "name": "beatiful.", "rarity": "common", "file": "beatiful.jpg"},
    {"id": "bandonthebich", "name": "bandonthebich.", "rarity": "rare", "file": "bandonthebich.jpg"},
    {"id": "banda", "name": "banda.", "rarity": "medium", "file": "banda.jpg"},
    {"id": "agrygentelmen", "name": "agrygentelmen.", "rarity": "common", "file": "agrygentelmen.jpg"},
    {"id": "52", "name": "52.", "rarity": "rare", "file": "52.jpg"},
]

# ---- –¢—Ä–æ—Ñ–µ–π–Ω–∞ –ª—ñ–≥–∞ ----
PRIZE_TIERS = {
    5: {"type": "weekly_sub", "title": "–¢–∏–∂–Ω–µ–≤–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç ‚Äî '–¢–∏ –∑–∞–≤–∂–¥–∏ –ø—Ä–∞–≤–∞'"},
    10: {"type": "pack", "title": "‚ú® –¢—Ä—ñ–π–∫–∞ –©–∞—Å–ª–∏–≤—á–∏–∫—ñ–≤ ‚ú®(3 –∫–∞—Ä—Ç–∫–∏)"},
    15: {"type": "horror_movie", "title": "–ü–µ—Ä–µ–≥–ª—è–¥ –±—É–¥—å-—è–∫–æ–≥–æ —Ñ—ñ–ª—å–º—É –∂–∞—Ö—ñ–≤"},
    20: {"type": "pack", "title": "üíñ –°—é—Ä–ø—Ä–∏–∑–Ω–∏–π –ë—É–∫–µ—Ç –ö–∞—Ä—Ç (3 –∫–∞—Ä—Ç–∫–∏)"},
    25: {"type": "romantic_dinner", "title": "–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—É –≤–µ—á–µ—Ä—é (–ø–æ –ø—Ä–∏—ó–∑–¥—É)"},
    30: {"type": "pack", "title": "üòª –ú—É—Ä-–ü–∞–∫  (3 –∫–∞—Ä—Ç–∫–∏)"},
    35: {"type": "pack", "title": "üåà –ü–æ—Ä—Ü—ñ—è –£–¥–∞—á—ñ (3 –ö–∞—Ä—Ç–∫–∏)"},
    40: {"type": "floating_prize", "title": "–ü–ª–∞–≤—É—á–∏–π –ø—Ä–∏–∑ (–¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∑—É –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤)"},
    55: {"type": "pack", "title": "üéÅ –ú—ñ—Å—Ç–µ—Ä—ñ-–ü–∞–∫: –¢—Ä—ñ–æ –ö–∞—Ä—Ç!"},
    60: {"type": "pack", "title": "‚ú® –ó—ñ–±—Ä–∞–Ω–æ –∑ –õ—é–±–æ–≤'—é (3 –∫–∞—Ä—Ç–∫–∏)"},
    65: {"type": "pack", "title": "‚ú® –¢—Ä—ñ–π–∫–∞ –©–∞—Å–ª–∏–≤—á–∏–∫—ñ–≤ ‚ú®"},
    70: {"type": "pack", "title": "üíñ –°—é—Ä–ø—Ä–∏–∑–Ω–∏–π –ë—É–∫–µ—Ç –ö–∞—Ä—Ç (3 –∫–∞—Ä—Ç–∫–∏)"},
    75: {"type": "pack", "title": "üòª –ú—É—Ä-–ü–∞–∫  (3 –∫–∞—Ä—Ç–∫–∏)"},
    80: {"type": "pack", "title": "üåà –ü–æ—Ä—Ü—ñ—è –£–¥–∞—á—ñ (3 –ö–∞—Ä—Ç–∫–∏)"},
    85: {"type": "pack", "title": "üéÅ –ú—ñ—Å—Ç–µ—Ä—ñ-–ü–∞–∫: –¢—Ä—ñ–æ –ö–∞—Ä—Ç!"},
    90: {"type": "pack", "title": "üçÄ –ö–∞—Ä—Ç–∫–æ–≤–∏–π –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç (3 –∫–∞—Ä—Ç–∫–∏)"},
    95: {"type": "pack", "title": "‚ú® –ó—ñ–±—Ä–∞–Ω–æ –∑ –õ—é–±–æ–≤'—é (3 –∫–∞—Ä—Ç–∫–∏)"},
    100: {"type": "pack", "title": "‚ú® –¢—Ä—ñ–π–∫–∞ –©–∞—Å–ª–∏–≤—á–∏–∫—ñ–≤ ‚ú®"},
}


def generate_collection_text(uid: int) -> str:
    """–ì–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user = ensure_user(uid)

    collection_ids = user.get('collection', [])
    txt = f"üóÇ –¢–≤–æ—è –∫–æ–ª–µ–∫—Ü—ñ—è: **{len(collection_ids)}/{len(CARD_POOL)}** –∫–∞—Ä—Ç–æ–∫\n\n"

    if not collection_ids:
        txt += "–ü–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—å–æ!"
    else:
        # –õ–æ–≥—ñ–∫–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
        collected_cards = [next(x for x in CARD_POOL if x['id'] == cid) for cid in collection_ids if
                           next((x for x in CARD_POOL if x['id'] == cid), None)]
        collected_cards.sort(key=lambda c: ({"common": 0, "medium": 1, "rare": 2}.get(c['rarity'], 3), c['name']))

        for card in collected_cards:
            rarity_label = card['rarity'].upper()
            txt += f"‚Äî **{card['name']}** ({rarity_label})\n"

    return txt

# ---- FSM –¥–ª—è –ø–æ–∫–µ—Ä—É ----
class PokerStates(StatesGroup):
    waiting_for_replace = State()


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ä—É–∫ —É –ø–æ–∫–µ—Ä—ñ (—Ç–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è)
USER_HANDS: Dict[int, List[str]] = {}


# ==================================
# –ë–õ–û–ö –†–û–ë–û–¢–ò –ó –î–ê–ù–ò–ú–ò
# ==================================

def load_data():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ä—ñ–≤–Ω—ñ–≤."""
    global USERS, USER_LEVELS
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                USERS = data.get('users', {})
                USER_LEVELS = {str(uid): int(lvl) for uid, lvl in data.get('levels', {}).items()}

            # ******* –ë–õ–û–ö –ü–ï–†–ï–í–Ü–†–ö–ò –¢–ê –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –î–ê–ù–ò–• *******
            for uid_str, user_data in USERS.items():
                # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ 'collection' —î —Å–ø–∏—Å–∫–æ–º
                if 'collection' in user_data and not isinstance(user_data['collection'], list):
                    user_data['collection'] = []

                    # üî¥ –ù–û–í–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ 'last_card_photo_id'
                if 'last_card_photo_id' not in user_data:
                    user_data['last_card_photo_id'] = None
            # ******* –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ *******

            logging.info("‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ä—ñ–≤–Ω—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
        else:
            USERS = {}
            USER_LEVELS = {}
            logging.warning("‚ö†Ô∏è –§–∞–π–ª users.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        USERS = {}
        USER_LEVELS = {}


def save_data():
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ä—ñ–≤–Ω—ñ–≤."""
    data_to_save = {
        'users': USERS,
        'levels': USER_LEVELS
    }
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")


def ensure_user(uid: int) -> Dict[str, Any]:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."""
    uid_str = str(uid)
    if uid_str not in USERS:
        USERS[uid_str] = {
            "last_slot_msg_id": None,
            "poker_history_msg_ids": [],
            'last_cookie_msg_id': None,
            "points": 0,
            "wins": 0,
            "collection": [],
            "prizes": [],
            "awarded_tiers": [],
            "subscriptions": {},
            "last_card_photo_id": None,
        }
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä—ñ–≤–µ–Ω—å, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if uid_str not in USER_LEVELS:
            USER_LEVELS[uid_str] = 1
        save_data()
    return USERS[uid_str]


def get_level(uid: int) -> int:
    """–û—Ç—Ä–∏–º—É—î —Ä—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1."""
    return USER_LEVELS.get(str(uid), 1)


def level_up(uid: int):
    """–ü—ñ–¥–≤–∏—â—É—î —Ä—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    uid_str = str(uid)
    USER_LEVELS[uid_str] = USER_LEVELS.get(uid_str, 1) + 1
    save_data()


def award_points_and_check(uid: int, points_gain: int = 1, win: bool = False) -> List[Tuple[int, Dict[str, str]]]:
    """–ù–∞—Ä–∞—Ö–æ–≤—É—î –±–∞–ª–∏/–≤–∏–≥—Ä–∞—à—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞ –Ω–æ–≤—ñ –ø—Ä–∏–∑–∏."""
    user = ensure_user(uid)
    user['points'] += points_gain
    if win:
        user['wins'] += 1

    newly_awarded = []
    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
    for threshold in sorted(PRIZE_TIERS.keys()):
        if user['wins'] >= threshold and threshold not in user['awarded_tiers']:
            prize = PRIZE_TIERS[threshold]
            user['awarded_tiers'].append(threshold)
            user['prizes'].append(prize)
            newly_awarded.append((threshold, prize))

    save_data()
    return newly_awarded


def give_pack_to_user(uid: int, pack_count: int = 1):
    """–í–∏–¥–∞—î –ø–∞–∫ –∫–∞—Ä—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ —è–∫ –ø—Ä–∏–∑."""
    user = ensure_user(uid)
    for _ in range(pack_count):
        user['prizes'].append({"type": "pack", "title": "–ü–∞–∫ –∫–∞—Ä—Ç–æ–∫ (3 –∫–∞—Ä—Ç–∫–∏)"})
    save_data()


def open_pack_for_user(uid: int) -> Optional[List[str]]:
    """–í—ñ–¥–∫—Ä–∏–≤–∞—î –æ–¥–∏–Ω –ø–∞–∫ –∫–∞—Ä—Ç–æ–∫ —ñ –¥–æ–¥–∞—î —ó—Ö –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó."""
    user = ensure_user(uid)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ ID –∫–∞—Ä—Ç–æ–∫ —É –ø—É–ª—ñ
    # –¶–µ–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –∫–∞—Ä—Ç–æ–∫ –¥–æ CARD_POOL
    all_card_ids = [card['id'] for card in CARD_POOL]

    idx = None
    for i, p in enumerate(user['prizes']):
        if isinstance(p, dict) and p.get("type") == "pack":
            idx = i
            break
    if idx is None:
        return None

    user['prizes'].pop(idx)

    # 1. –ö–û–†–ï–ö–¢–ù–ê –ì–ï–ù–ï–†–ê–¶–Ü–Ø: –í–∏–±–∏—Ä–∞—î–º–æ 3 —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö ID –∑ —É—Å—å–æ–≥–æ –ø—É–ª—É
    new_card_ids = random.sample(all_card_ids, 3)

    # 2. –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó
    for card_id in new_card_ids:
        if card_id not in user['collection']:
            user['collection'].append(card_id)

    save_data()

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ ID, —è–∫—ñ –≤–∏–ø–∞–ª–∏ (–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É)
    return new_card_ids


def card_file_path(card_id: str) -> Optional[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∫–∞—Ä—Ç–∫–∏."""
    for c in CARD_POOL:
        if c['id'] == card_id:
            return os.path.join(CARDS_DIR, c['file'])
    return None


# ==================================
# –ë–õ–û–ö –ü–û–ö–ï–†-–õ–û–ì–Ü–ö–ò
# ==================================

def get_card_rank(card):
    """–í–∏—Ç—è–≥—É—î –Ω–æ–º—ñ–Ω–∞–ª –∫–∞—Ä—Ç–∏, –ø—Ä–∏–ø—É—Å–∫–∞—é—á–∏, —â–æ –º–∞—Å—Ç—å - –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–º–≤–æ–ª."""
    # '10‚ô•Ô∏è' -> '10', 'A‚ô†Ô∏è' -> 'A'
    return card[:-1]


def get_rank_value(rank):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –Ω–æ–º—ñ–Ω–∞–ª –∫–∞—Ä—Ç–∏ (2-A) —É —á–∏—Å–ª–æ–≤–∏–π —Ä–∞–Ω–≥ (2-14)."""
    if rank.isdigit():
        return int(rank)
    return {'J': 11, 'Q': 12, 'K': 13, 'A': 14}.get(rank.upper(), 0)


def evaluate_hand(hand):
    """–û—Ü—ñ–Ω—é—î –ø–æ–∫–µ—Ä–Ω—É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î (—Ä–∞–Ω–≥_–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó, –±–∞–ª–∏_–≤–∏–≥—Ä–∞—à—É, –Ω–∞–∑–≤–∞)."""

    if len(hand) != 5:
        # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–µ–≤—ñ—Ä–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–∞—Ä—Ç
        return (0, 0, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ä—É–∫–∞ (–Ω–µ 5 –∫–∞—Ä—Ç)")

    ranks = []
    suits = []
    for card in hand:
        rank = get_card_rank(card)
        ranks.append(rank)

        # –ú–∞—Å—Ç—å = –£—Å–µ, —â–æ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤–∏–ª—É—á–µ–Ω–Ω—è –Ω–æ–º—ñ–Ω–∞–ª—É (—Ä–∞–Ω–≥—É)
        # –¶–µ —î–¥–∏–Ω–∏–π –Ω–∞–¥—ñ–π–Ω–∏–π —Å–ø–æ—Å—ñ–±, —â–æ –ø—Ä–∞—Ü—é—î –∑ –±–∞–≥–∞—Ç–æ–±–∞–π—Ç–æ–≤–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        suit = card[len(rank):]
        suits.append(suit)
    values = sorted([get_rank_value(r) for r in ranks])

    # 1. –ß–∞—Å—Ç–æ—Ç–∞ –Ω–æ–º—ñ–Ω–∞–ª—ñ–≤
    rank_counts = {}
    for r in ranks:
        rank_counts[r] = rank_counts.get(r, 0) + 1

    counts = sorted(rank_counts.values(), reverse=True)

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –§–ª–µ—à—É (–≤—Å—ñ –º–∞—Å—Ç—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ)
    is_flush = len(set(suits)) == 1

    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –°—Ç—Ä–µ–π—Ç—É (5 –∫–∞—Ä—Ç –ø–æ—Å–ø—ñ–ª—å)
    is_straight = len(set(values)) == 5 and (values[-1] - values[0] == 4)
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è A, 2, 3, 4, 5 (–¢—É–∑ —è–∫ –æ–¥–∏–Ω–∏—Ü—è)
    if not is_straight and set(values) == {14, 2, 3, 4, 5}:
        is_straight = True

    # -----------------------------------
    # –Ü–Ñ–†–ê–†–•–Ü–Ø –ö–û–ú–ë–Ü–ù–ê–¶–Ü–ô (–≤—ñ–¥ –Ω–∞–π–≤–∏—â–æ—ó –¥–æ –Ω–∞–π–Ω–∏–∂—á–æ—ó)
    # -----------------------------------

    # 9. –°—Ç—Ä–µ–π—Ç-–§–ª–µ—à
    if is_straight and is_flush:
        return (9, 10, "–°—Ç—Ä–µ–π—Ç-–§–ª–µ—à! üëë")

    # 8. –ö–∞—Ä–µ
    if counts[0] == 4:
        return (8, 8, "–ö–∞—Ä–µ! ü§Ø")

    # 7. –§—É–ª-–•–∞—É—Å (3 –æ–¥–Ω–∞–∫–æ–≤–∏—Ö + 2 –æ–¥–Ω–∞–∫–æ–≤–∏—Ö)
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ len(counts) > 1 –¥–ª—è –±–µ–∑–ø–µ–∫–∏, —Ö–æ—á–∞ counts[1] –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π
    if counts[0] == 3 and len(counts) > 1 and counts[1] == 2:
        return (7, 7, "–§—É–ª-–•–∞—É—Å! ü•≥")

    # 6. –§–ª–µ—à (5 –∫–∞—Ä—Ç –æ–¥–Ω—ñ—î—ó –º–∞—Å—Ç—ñ)
    if is_flush:
        return (6, 6, "–§–ª–µ—à! üíñ")

    # 5. –°—Ç—Ä–µ–π—Ç (5 –∫–∞—Ä—Ç –ø–æ—Å–ø—ñ–ª—å)
    if is_straight:
        return (5, 5, "–°—Ç—Ä–µ–π—Ç! üé≤")

    # 4. –¢—Ä—ñ–π–∫–∞
    if counts[0] == 3:
        return (4, 4, "–¢—Ä—ñ–π–∫–∞!")

    # 3. –î–≤—ñ –ø–∞—Ä–∏ (2 –æ–¥–Ω–∞–∫–æ–≤–∏—Ö + 2 –æ–¥–Ω–∞–∫–æ–≤–∏—Ö)
    if counts[0] == 2 and len(counts) > 1 and counts[1] == 2:
        return (3, 3, "–î–≤—ñ –ø–∞—Ä–∏!")

    # 2. –ü–∞—Ä–∞
    if counts[0] == 2:
        return (2, 2, "–ü–∞—Ä–∞!")

    # 1. –°—Ç–∞—Ä—à–∞ –∫–∞—Ä—Ç–∞
    return (1, 0, "–°—Ç–∞—Ä—à–∞ –∫–∞—Ä—Ç–∞.")


# ==================================
# –ë–õ–û–ö –Ü–ù–¢–ï–†–§–ï–ô–°–£ –¢–ê –û–ë–†–û–ë–ù–ò–ö–Ü–í
# ==================================

def main_menu() -> InlineKeyboardMarkup:
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ —ñ–≥—Ä–∞–º–∏ —Ç–∞ –∫–æ–ª–µ–∫—Ü—ñ—î—é."""
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç —ñ–∑ –∑–∞–≤–æ–∑–æ–º", callback_data="slot"),
                InlineKeyboardButton(text="üÉè –ü–æ–∫–µ—Ä —ñ–∑ –í–æ–ª—Ç–µ—Ä–æ–º", callback_data="poker"),
                InlineKeyboardButton(text="üç™ –ü–µ—á–µ–Ω—å–∫–æ–≤–∏–π —Å—é—Ä–ø—Ä–∏–∑", callback_data="cookie")
            ],
            [
                InlineKeyboardButton(text="üì¶ –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–∫", callback_data="open_pack"),
                InlineKeyboardButton(text="üóÇ –ö–æ–ª–µ–∫—Ü—ñ—è", callback_data="collection")
            ]
        ]
    )
    return kb


# ---- –ö–æ–º–∞–Ω–¥–∏ ----
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    ensure_user(message.from_user.id)
    await message.answer("–í—ñ—Ç–∞—é –≤ *–õ—É—â—ñ–Ω –ö–∞–∑–∏–Ω–æ* –ö–û–•–ê–ù–ù–Ø –ú–û–Ñ üé∞\n–û–±–µ—Ä–∏ –≥—Ä—É:", parse_mode="Markdown",
                         reply_markup=main_menu())


# --- –ó–Ω–∞–π–¥—ñ—Ç—å —Ç–∞ –∑–∞–º—ñ–Ω—ñ—Ç—å —Ü–µ–π –±–ª–æ–∫ ---

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command  # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ü–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!


@dp.callback_query(lambda c: c.data.startswith("view_card_"))
async def cb_view_card(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ä—Ç–∫–∏, –≤–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Ñ–æ—Ç–æ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –Ω–æ–≤–µ."""

    # 0. üî¥ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ uid —Ç–∞ user
    uid = callback.from_user.id
    user = ensure_user(uid)

    # 1. –í–∏—Ç—è–≥—É—î–º–æ ID –∫–∞—Ä—Ç–∫–∏
    card_id = callback.data.split("_")[-1]

    # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–≤–Ω–∏–π –æ–±'—î–∫—Ç –∫–∞—Ä—Ç–∫–∏
    card = next((x for x in CARD_POOL if x['id'] == card_id), None)

    if not card:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # 3. –í–ò–î–ê–õ–ï–ù–ù–Ø –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –§–û–¢–û
    if user['last_card_photo_id']:
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ —Ñ–æ—Ç–æ
            await callback.bot.delete_message(chat_id=uid, message_id=user['last_card_photo_id'])
        except Exception:
            pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏

    # 4. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    file_path = os.path.join(CARDS_DIR, card['file'])

    # 5. üî¥ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –õ–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID
    if os.path.exists(file_path):
        caption = (
            f"üÉè **{card['name']}**\n"
            f"‚ú® –†—ñ–¥–∫—ñ—Å—Ç—å: {card['rarity'].upper()}"
        )

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ
        sent_photo = await callback.bot.send_photo(
            chat_id=uid,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ uid
            photo=FSInputFile(file_path),
            caption=caption,
            parse_mode="Markdown"
        )

        # üî¥ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø ID –ù–û–í–û–ì–û –§–û–¢–û
        user['last_card_photo_id'] = sent_photo.message_id
        save_data()

    else:
        # –Ø–∫—â–æ —Ñ–∞–π–ª –∫–∞—Ä—Ç–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–∞ –¥–∏—Å–∫—É
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # 6. –ó–∞–∫—Ä–∏—Ç—Ç—è callback-–∑–∞–ø–∏—Ç—É
    await callback.answer()


# –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ –í–°–Ü–• —ñ–Ω—à–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤, –ø–µ—Ä–µ–¥ async def main()

@dp.callback_query(lambda c: c.data == "main_menu_back")
async def cb_main_menu_back(callback: types.CallbackQuery):
    """–í–∏–¥–∞–ª—è—î —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–∫–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Ä–µ–¥–∞–≥—É—é—á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    uid = callback.from_user.id
    user = ensure_user(uid)

    await callback.answer()

    # üî¥ –í–ò–î–ê–õ–ï–ù–ù–Ø –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –§–û–¢–û
    if user['last_card_photo_id']:
        try:
            await callback.bot.delete_message(chat_id=uid, message_id=user['last_card_photo_id'])
        except Exception:
            pass
        user['last_card_photo_id'] = None # –û–±–Ω—É–ª—è—î–º–æ
        save_data()

    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–µ–Ω—é –∫–æ–ª–µ–∫—Ü—ñ—ó)
    await callback.bot.edit_message_text(
        chat_id=uid,
        message_id=callback.message.message_id,
        text="–í—ñ—Ç–∞—é –≤ *–õ—É—â—ñ–Ω –ö–∞–∑–∏–Ω–æ* –ö–û–•–ê–ù–ù–Ø –ú–û–Ñ üé∞\n–û–±–µ—Ä–∏ –≥—Ä—É:",
        parse_mode="Markdown",
        reply_markup=main_menu()
    )

@dp.callback_query(lambda c: c.data == "collection")
async def cb_collection(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–ª–µ–∫—Ü—ñ—è'. –°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —Ä–µ–¥–∞–≥—É—é—á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    uid = callback.from_user.id
    user = ensure_user(uid)
    collection_ids = user.get('collection', [])

    await callback.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –æ–¥—Ä–∞–∑—É

    # 1. –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    total_cards = len(CARD_POOL)
    collected_count = len(collection_ids)

    # 2. –Ø–∫—â–æ –∫–æ–ª–µ–∫—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—è, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
    if not collection_ids:
        text = f"üóÇ –¢–≤–æ—è –∫–æ–ª–µ–∫—Ü—ñ—è: **0/{total_cards}** –∫–∞—Ä—Ç–æ–∫. –ü–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—å–æ!"
        # üî¥ –†–µ–¥–∞–≥—É—î–º–æ –¢–Ü–õ–¨–ö–ò —Ç–µ–∫—Å—Ç, –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–Ω–∏–∫–Ω–µ, —Ç–æ–º—É –¥–æ–¥–∞–º–æ –º–µ–Ω—é
        return await callback.bot.edit_message_text(
            chat_id=uid,
            message_id=callback.message.message_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=main_menu()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        )

    # ... (–õ–æ–≥—ñ–∫–∞ –∑–±–æ—Ä—É —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è collected_cards) ...
    collected_cards = [
        card for card in CARD_POOL if card['id'] in collection_ids
    ]
    rarity_map = {"common": 0, "medium": 1, "rare": 2}
    collected_cards.sort(key=lambda c: (rarity_map.get(c['rarity'], 3), c['name']))

    # 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏
    keyboard_buttons = []
    for card in collected_cards:
        callback_data = f"view_card_{card['id']}"
        btn = InlineKeyboardButton(
            text=f"üÉè {card['name']} ({card['rarity']})",
            callback_data=callback_data
        )
        keyboard_buttons.append([btn])

    # üî¥ –î–û–î–ê–Ñ–ú–û –ö–ù–û–ü–ö–£ –ü–û–í–ï–†–ù–ï–ù–ù–Ø üî¥
    keyboard_buttons.append(
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ —ñ–≥–æ—Ä", callback_data="main_menu_back")]
    )

    kb = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    new_text = (
        f"üóÇ –¢–≤–æ—è –∫–æ–ª–µ–∫—Ü—ñ—è: **{collected_count}/{total_cards}** –∫–∞—Ä—Ç–æ–∫.\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç–∫—É, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ó—ó —Ñ–æ—Ç–æ:"
    )

    # 4. –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–ó–ú–Ü–ù–Æ–Ñ–ú–û –¢–ï–ö–°–¢ –¢–ê –ö–õ–ê–í–Ü–ê–¢–£–†–£ –û–î–ù–û–ß–ê–°–ù–û)
    await callback.bot.edit_message_text(
        chat_id=uid,
        message_id=callback.message.message_id,
        text=new_text,
        reply_markup=kb,
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data == "open_pack")
async def handle_open_pack(callback: types.CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–∫–∞ –∫–∞—Ä—Ç–æ–∫."""
    uid = callback.from_user.id
    await callback.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –æ–¥—Ä–∞–∑—É, —â–æ–± –Ω–µ –±—É–ª–æ "–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è"

    res = open_pack_for_user(uid)

    if not res:
        await callback.message.answer("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø–∞–∫–∞ üò¢")
        return

    await callback.message.answer("üì¶ –¢–∏ –≤—ñ–¥–∫—Ä–∏–ª–∞ –ø–∞–∫! –î–∏–≤–∏—Å—å, —â–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ:")

    # --- –õ–û–ì–Ü–ö–ê –ü–û–ß–ï–†–ì–û–í–û–ì–û –ù–ê–î–°–ò–õ–ê–ù–ù–Ø ---
    for i, cid in enumerate(res):
        card = next((x for x in CARD_POOL if x['id'] == cid), None)

        if card:
            path = card_file_path(cid)
            caption = (
                f"üéâ –ö–∞—Ä—Ç–∫–∞ #{i + 1} –∑ 3\n"
                f"**–ù–∞–∑–≤–∞**: {card['name']}\n"
                f"**–†—ñ–¥–∫—ñ—Å—Ç—å**: {card['rarity'].upper()}"
            )

            if path and os.path.exists(path):
                try:
                    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –û–î–ù–ï —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º
                    await callback.bot.send_photo(
                        chat_id=uid,
                        photo=FSInputFile(path),
                        caption=caption,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")
                    await callback.message.answer(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–∞—Ä—Ç–∫—É: {card['name']} (–ø–æ–º–∏–ª–∫–∞ —Ñ–∞–π–ª—É).")
            else:
                await callback.message.answer(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–∞—Ä—Ç–∫—É: {card['name']} (—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ).")

        # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
        if i < len(res) - 1:
            await asyncio.sleep(1.5)

    await callback.message.answer("\n\nüéâ –í—Å—ñ –∫–∞—Ä—Ç–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç–æ! üéâ")
    await callback.message.answer("üéÆ –û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –≥—Ä—É:", reply_markup=main_menu())


@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user = ensure_user(message.from_user.id)
    uid = message.from_user.id

    txt = f"üìä **–°—Ç–∞—Ç—É—Å**\n"
    txt += f"**–ë–∞–ª–∏**: {user['points']}\n"
    txt += f"**–í–∏–≥—Ä–∞—à—ñ** (–¥–ª—è –ø—Ä–∏–∑—ñ–≤): {user['wins']}\n"
    txt += f"**–†—ñ–≤–µ–Ω—å —Å–ª–æ—Ç–∞**: {get_level(uid)}\n\n"
    txt += f"**–ü—Ä–∏–∑–∏** ({len(user['prizes'])}):\n"

    if not user['prizes']:
        txt += "‚Äî –ù–µ–º–∞—î\n"
    else:
        for p in user['prizes']:
            if isinstance(p, dict):
                txt += f"‚Äî {p.get('title', '(–Ω–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–∏–∑)')}\n"

    await message.answer(txt, parse_mode="Markdown")


@dp.message(Command("give_pack"))
async def cmd_give_pack(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏–¥–∞—á—ñ –ø–∞–∫–∞."""
    give_pack_to_user(message.from_user.id)
    await message.answer("–¢–∏ –æ—Ç—Ä–∏–º–∞–ª–∞ 1 —Ç–µ—Å—Ç–æ–≤–∏–π –ø–∞–∫ üéÅ")


# ---- –°–ª–æ—Ç ----
@dp.callback_query(lambda c: c.data == "slot")
async def play_slot(callback: types.CallbackQuery):
    """–ì—Ä–∞ –≤ —Å–ª–æ—Ç."""
    uid = callback.from_user.id
    user = ensure_user(uid)
    SLOT_COST = 1

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if user.get('last_slot_msg_id'):
        try:
            await callback.bot.delete_message(chat_id=uid, message_id=user['last_slot_msg_id'])
        except Exception:
            pass

    await callback.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –æ–¥—Ä–∞–∑—É

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
    if user['points'] < SLOT_COST:
        await callback.message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤! –ü–æ—Ç—Ä—ñ–±–Ω–æ {SLOT_COST}, —É —Ç–µ–±–µ {user['points']}.")
        return

    # –°–ø–∏—Å–∞–Ω–Ω—è –±–∞–ª—É
    user['points'] -= SLOT_COST
    save_data()

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è "–ö—Ä—É—Ç–∏–º–æ –±–∞—Ä–∞–±–∞–Ω–∏..."
    spinning_msg = await callback.message.answer(f"üé∞ –ö—Ä—É—Ç–∏–º–æ –±–∞—Ä–∞–±–∞–Ω–∏... (-{SLOT_COST} –±–∞–ª)")
    user['last_slot_msg_id'] = spinning_msg.message_id
    save_data()

    await asyncio.sleep(1.5)  # –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É

    # –õ–æ–≥—ñ–∫–∞ —Å–ª–æ—Ç–∞
    level = get_level(uid)
    symbols = ["üíã", "üçì", "üíé", "üî•", "üçÄ", "‚≠ê", "üç™", "üé≤"]
    # –®–∞–Ω—Å –Ω–∞ —Ç—Ä—ñ–π–∫—É –∑–º–µ–Ω—à—É—î—Ç—å—Å—è –∑ —Ä—ñ–≤–Ω–µ–º
    win_chance_percent = max(15 - (level - 1) * 2, 5)  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, 15%, –º—ñ–Ω—ñ–º—É–º 5%

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    result = [random.choice(symbols) for _ in range(3)]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–≥—Ä–∞—à—É
    if len(set(result)) == 1 and random.randint(1, 100) <= win_chance_percent:
        newly = award_points_and_check(uid, points_gain=5, win=True)
        level_up(uid)
        msg = f"–¢—Ä–∏ {result[0]}! üéâ **+5 –±–∞–ª—ñ–≤**! –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ {get_level(uid)}."
    elif len(set(result)) == 2:
        newly = award_points_and_check(uid, points_gain=2, win=False)
        msg = f"–ú–∞–π–∂–µ –≤–∏–≥—Ä–∞–ª–∏! **+2 –±–∞–ª–∏**. –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {get_level(uid)}."
    else:
        newly = award_points_and_check(uid, points_gain=0, win=False)
        msg = f"–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–ø–∞–ª–æ üò¢ –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {get_level(uid)}."

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    final_text = f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **{' | '.join(result)}**\n\n"
    final_text += msg
    final_text += f"\n–ü–æ—Ç–æ—á–Ω—ñ –±–∞–ª–∏: **{ensure_user(uid)['points']}**"

    prize_texts = [f"üéÅ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–∏–∑: {prize['title']}" for threshold, prize in newly]

    if prize_texts:
        final_text += "\n\n**–û—Ç—Ä–∏–º–∞–Ω—ñ –ø—Ä–∏–∑–∏:**\n" + "\n".join(prize_texts)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await callback.bot.edit_message_text(
        chat_id=uid,
        message_id=spinning_msg.message_id,
        text=final_text,
        parse_mode="Markdown"
    )

    # –î–æ–¥–∞—Ç–∫–æ–≤–µ –º–µ–Ω—é
    await callback.message.answer("üéÆ –û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –≥—Ä—É:", reply_markup=main_menu())


# ---- –ü–æ–∫–µ—Ä ----
@dp.callback_query(lambda c: c.data == "poker")
async def cb_poker(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏ –≤ –ø–æ–∫–µ—Ä: —Ä–æ–∑–¥–∞—á–∞ –∫–∞—Ä—Ç."""
    uid = callback.from_user.id
    user = ensure_user(uid)

    await callback.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –æ–¥—Ä–∞–∑—É

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≥—Ä–∏
    for msg_id in user.get('poker_history_msg_ids', []):
        try:
            await callback.bot.delete_message(chat_id=uid, message_id=msg_id)
        except Exception:
            pass

    user['poker_history_msg_ids'] = []
    history = []

    # –õ–æ–≥—ñ–∫–∞ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏ (–∫–æ–ª–æ–¥–∞ —Ç–∞ —Ä–æ–∑–¥–∞—á–∞)
    suits = ["‚ô•", "‚ô¶", "‚ô£", "‚ô†"]
    values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
    deck = [f"{v}{s}" for v in values for s in suits]
    hand = random.sample(deck, 5)  # –í–∏–±–∏—Ä–∞—î–º–æ 5 —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ä—Ç

    USER_HANDS[uid] = hand.copy()

    m1 = await callback.message.answer("üÉè –í–æ–ª—Ç–µ—Ä —Ä–æ–∑–¥–∞—î –∫–∞—Ä—Ç–∏...")
    history.append(m1.message_id)

    await asyncio.sleep(1)

    numbered_hand = "\n".join([f"**{i + 1}**: {card}" for i, card in enumerate(hand)])
    m2 = await callback.message.answer(f"–í–∞—à—ñ –∫–∞—Ä—Ç–∏:\n{numbered_hand}", parse_mode="Markdown")
    history.append(m2.message_id)

    m3 = await callback.message.answer(
        "**–©–æ–± –∑–∞–º—ñ–Ω–∏—Ç–∏:** –ù–∞–¥—ñ—à–ª—ñ—Ç—å **–Ω–æ–º–µ—Ä–∏** –∫–∞—Ä—Ç (–≤—ñ–¥ 1 –¥–æ 5), —è–∫—ñ —Ö–æ—á–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏, —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª. *–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1 3 5*\n"
        "**–©–æ–± –∑–∞–ª–∏—à–∏—Ç–∏:** –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ª–æ–≤–æ `–Ω—ñ`.",
        parse_mode="Markdown"
    )
    history.append(m3.message_id)

    user['poker_history_msg_ids'] = history
    save_data()

    await state.set_state(PokerStates.waiting_for_replace)


@dp.message(PokerStates.waiting_for_replace)
async def poker_replace(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    user = ensure_user(uid)
    hand = USER_HANDS.get(uid)
    suits = ["‚ô•", "‚ô¶", "‚ô£", "‚ô†"]
    values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
    history = user.get('poker_history_msg_ids', [])

    history.append(message.message_id)

    # –ó–∞—Ö–∏—Å—Ç: —è–∫—â–æ —Ä—É–∫–∏ –Ω–µ–º–∞—î, –≤–∏—Ö–æ–¥–∏–º–æ
    if not hand:
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞! –ì—Ä–∞ –≤ –ø–æ–∫–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await state.clear()
        return

    text = message.text.strip().lower()

    if text != "–Ω—ñ":

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω—É –∫–æ–ª–æ–¥—É —Ç–∞ –≤–∏–∫–ª—é—á–∞—î–º–æ –∫–∞—Ä—Ç–∏, —â–æ –≤–∂–µ —î –≤ —Ä—É—Ü—ñ.
        deck = [f"{v}{s}" for v in values for s in suits]
        available_cards = [c for c in deck if c not in hand]

        try:
            indexes = [int(x) - 1 for x in text.split()]

            # –ó–∞–º—ñ–Ω–∞ –∫–∞—Ä—Ç
            for i in set(indexes):
                if 0 <= i < 5:
                    if available_cards:
                        # –ë–µ—Ä–µ–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –∫–∞—Ä—Ç—É, —â–æ –Ω–µ –±—É–ª–∞ –≤ —Ä—É—Ü—ñ
                        new_card = random.choice(available_cards)
                        hand[i] = new_card
                        available_cards.remove(new_card)  # –í–∏–¥–∞–ª—è—î–º–æ —ó—ó –∑ –ø—É–ª—É

        except Exception:
            m_err = await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä. –ö–∞—Ä—Ç–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Ç—ñ —Å–∞–º—ñ.")
            history.append(m_err.message_id)

    # ... (—Ä–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ –æ—Ü—ñ–Ω–∫–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó) ...

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Ä—É–∫—É
    USER_HANDS[uid] = hand

    # 1. –ö–û–ù–°–û–õ–Ü–î–ê–¶–Ü–Ø –§–Ü–ù–ê–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–£
    numbered_hand = "\n".join([f"**{i + 1}**: {card}" for i, card in enumerate(hand)])
    final_text = f"üÉè **–í–∞—à —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –Ω–∞–±—ñ—Ä:**\n{numbered_hand}\n\n"

    # --- –õ–û–ì–Ü–ö–ê –û–¶–Ü–ù–ö–ò ---
    rank, points_gain, combo_name = evaluate_hand(hand)
    win_flag = rank >= 3

    newly = award_points_and_check(uid, points_gain=points_gain, win=win_flag)

    if points_gain > 0:
        result_msg = f"üéâ –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è: **{combo_name}**! –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ **+{points_gain} –±–∞–ª—ñ–≤**."
    else:
        result_msg = f"üòà –í–æ–ª—Ç–µ—Ä –ø–µ—Ä–µ–º—ñ–≥ —Ü—å–æ–≥–æ —Ä–∞–∑—É. –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è: {combo_name}."

    final_text += result_msg
    final_text += f"\n–ü–æ—Ç–æ—á–Ω—ñ –±–∞–ª–∏: **{ensure_user(uid)['points']}**"

    # –ü—Ä–∏–∑–∏
    prize_texts = [f"üéÅ {p['title']}" for t, p in newly]

    if prize_texts:
        final_text += "\n\n**–û—Ç—Ä–∏–º–∞–Ω—ñ –ø—Ä–∏–∑–∏:**\n" + "\n".join(prize_texts)

    # 2. –ù–ê–î–°–ò–õ–ê–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–£
    result_msg = await message.answer(final_text, parse_mode="Markdown")
    history.append(result_msg.message_id)

    menu_msg = await message.answer("üéÆ –û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –≥—Ä—É:", reply_markup=main_menu())
    history.append(menu_msg.message_id)

    user['poker_history_msg_ids'] = history
    save_data()

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞–Ω—É FSM
    await state.clear()


# ---- –ü–µ—á–µ–Ω—å–∫–æ–≤–∏–π —Å—é—Ä–ø—Ä–∏–∑ ----
@dp.callback_query(lambda c: c.data == "cookie")
async def cookie_surprise(callback: types.CallbackQuery):
    """–ì—Ä–∞ –≤ –ø–µ—á–µ–Ω—å–∫–æ–≤–∏–π —Å—é—Ä–ø—Ä–∏–∑."""
    uid = callback.from_user.id
    user = ensure_user(uid)

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    if user.get('last_cookie_msg_id'):
        try:
            await callback.bot.delete_message(chat_id=uid, message_id=user['last_cookie_msg_id'])
        except Exception:
            pass

    await callback.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –æ–¥—Ä–∞–∑—É

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è "–í –ü–†–û–¶–ï–°–Ü"
    cookie_msg = await callback.message.answer("üç™ –ü—Ä–∞—Ü—ñ–≤–Ω–∏—Ü—è –õ—É—â—ñ–Ω –¥—ñ—Å—Ç–∞–ª–∞ –ø–µ—á–µ–Ω—å–∫—É...")
    user['last_cookie_msg_id'] = cookie_msg.message_id
    save_data()

    await asyncio.sleep(1.5)

    # –õ–æ–≥—ñ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    fortunes = [
        "–¢–æ–±—ñ —Å–∫–æ—Ä–æ –∑–∞–≤–µ–∑—É—Ç—å —É–¥–∞—á—É üòò", "–•—Ç–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω—è—à–∫–∞? –¢–∏ üíÖ",
        "–°—ñ–≥–º–∞ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î üòé", "–î–∑–≤—ñ–Ω–æ–∫ –≤—ñ–¥ –ø—Ä–∞—Ü—ñ–≤–Ω–∏—Ü—ñ ‚ù§Ô∏èüìû",
        "–õ—É—â—ñ–Ω –∫–∞–∂–µ: –ø–∏–π –≤–æ–¥–∏—á–∫—É –π –∑–∞–ª–∏—à–∞–π—Å—è –ø–µ—á–µ–Ω—å–∫–æ—é üç™"
    ]

    fortune = random.choice(fortunes)
    points_gain = 2 if random.random() < 0.25 else 0  # 25% —à–∞–Ω—Å –æ—Ç—Ä–∏–º–∞—Ç–∏ 2 –±–∞–ª–∏

    newly = award_points_and_check(uid, points_gain=points_gain, win=points_gain > 0)

    # –ö–æ–Ω—Å–æ–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É
    final_text = f"‚ú® **–í–∞—à–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è:** {fortune}\n\n"

    if points_gain > 0:
        final_text += f"üéâ –ó–∞ –≤–¥–∞–ª–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è! –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ **+{points_gain} –±–∞–ª—ñ–≤**."
    else:
        final_text += f"–ë–∞–ª—ñ–≤ –Ω–µ –¥–æ–¥–∞–Ω–æ, –∞–ª–µ –ø–∞–º'—è—Ç–∞–π: –¥–æ–ª—è —É —Ç–≤–æ—ó—Ö —Ä—É–∫–∞—Ö!"

    final_text += f"\n–ü–æ—Ç–æ—á–Ω—ñ –±–∞–ª–∏: **{ensure_user(uid)['points']}**"

    prize_texts = [f"üéÅ {p['title']}" for t, p in newly]
    if prize_texts:
        final_text += "\n\n**–û—Ç—Ä–∏–º–∞–Ω—ñ –ø—Ä–∏–∑–∏:**\n" + "\n".join(prize_texts)

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await callback.bot.edit_message_text(
        chat_id=uid,
        message_id=cookie_msg.message_id,
        text=final_text,
        parse_mode="Markdown"
    )

    await callback.message.answer("üéÆ –û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –≥—Ä—É:", reply_markup=main_menu())


# ==================================
# –ë–õ–û–ö –ó–ê–ü–£–°–ö–£
# ==================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    Path(CARDS_DIR).mkdir(parents=True, exist_ok=True)
    load_data()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ skip_updates=False –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏ –ø—ñ–¥ —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é,
    # –∞–ª–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ True, —è–∫—â–æ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—ñ –Ω–∞–∫–æ–ø–∏—á–∏–ª–∏—Å—è,
    # –ø–æ–∫–∏ –±–æ—Ç –±—É–≤ –æ—Ñ–ª–∞–π–Ω.
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.run() –¥–ª—è —Å—É—á–∞—Å–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        asyncio.run(main())
    except KeyboardInterrupt:

        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
